{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["userAccessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","spotifyAuthorizeURI","concat","userSearchTerm","searchRequest","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","findIndex","savedTrack","push","trackIndex","_track","splice","_this2","trackURIs","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7434920f.chunk.js","sourcesContent":["const spotifyAuthorizeURIBase = 'https://accounts.spotify.com/authorize'\nconst spotifyAPIURIBase = 'https://api.spotify.com/v1/'\n// Step 82\nconst clientId = 'e6fcab95d31c472aaa8b16a90ef7721f'\n// Step 81\n// const redirectURI = 'http://localhost:3000/'\n// Step 97\n// const redirectURI = 'https://jammmingapp.surge.sh'\n\nconst redirectURI = 'https://jammmingapp2.surge.sh'\n// Step 77\nlet userAccessToken\n\n// Step 76\nconst Spotify = {\n\n    getAccessToken() {\n        if(userAccessToken) {\n            return userAccessToken\n        }\n\t\t\n\t\t// Step 79\n        const accessTokenMatch = \t\t\n\t\t\t  window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = \n\t\t\t  window.location.href.match(/expires_in=([^&]*)/);\n\n\t\t// Step 80\n        if (accessTokenMatch && expiresInMatch) {\n            userAccessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            \twindow.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n            \twindow.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        } else {\n\t\t\t// Step 83\n            const spotifyAuthorizeURI = `${spotifyAuthorizeURIBase}?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n            window.location = spotifyAuthorizeURI;\n        }\n\n    },\n\n\t// Step 85\n    search(userSearchTerm) {\n        const userAccessToken = Spotify.getAccessToken();\n\t\t// Step 86\n        const searchRequest = `${spotifyAPIURIBase}search?type=track&q=${userSearchTerm}`\n        return fetch(searchRequest, {\n            headers : {\n                Authorization : `Bearer ${userAccessToken}`\n            }\n        }).then(response => {\n\t\t\t// Step 87- extremely difficult\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id : track.id,\n                name : track.name,\n                artist : track.artists[0].name,\n                album : track.album.name,\n                uri : track.uri,\n            }));\n        });\n    },\n\n\t// Step 90\n    savePlaylist(playlistName, trackUris) {\n        if (!playlistName || !trackUris.length) {\n            return;\n        }\n\n\t\t// Step 91\n        const userAccessToken = Spotify.getAccessToken();\n        const headers = { Authorization : `Bearer ${userAccessToken}` }\n        let userId\n\t\t// Step 92, fetch #1\n\t\t// Step 94, fetch #2\n        return fetch(`${spotifyAPIURIBase}me`, {headers : headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`${spotifyAPIURIBase}users/${userId}/playlists`, {\n                headers : headers,\n                method : 'POST',\n                body : JSON.stringify({name : playlistName})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`${spotifyAPIURIBase}users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers : headers,\n                    method : 'POST',\n                    body : JSON.stringify({uris: trackUris})\n                });\n            });\n        });\n    }\n}\n\n// Step 76\nexport default Spotify","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends Component {\n  // Step 70\n  // Needed to Add \"this.state\"\n  constructor(props){\n  super(props)\n\t  this.state = { searchTerm: '' }\n\t  this.search = this.search.bind(this)\n\t  this.handleTermChange = this.handleTermChange.bind(this)\n  };\n\t\n  search() {\n\tthis.props.onSearch(this.state.searchTerm);\n  };\n\n  // Step 71- difficult\n  handleTermChange(event) {\n  \tthis.setState({ searchTerm : event.target.value })\n  };\n\t\n  render() {\n    return (\n\t\t<div className=\"SearchBar\">\n\t\t  {/* Step 73, onChange */}\n\t\t  <input \n\t\t\t\tplaceholder=\"Enter Song, Album, or Artist\" \n\t\t\t\tonChange={this.handleTermChange} />\n\t\t  <a onClick={this.search}>SEARCH</a>\n\t\t</div>\n    );\n  }\n}\n\nexport default SearchBar;","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './Track.css';\n\nclass Track extends Component {\n// Step 46, addTrack.bind()\n// Step 54, removeTrack.bind()\n  constructor(props){\n  super(props)\n\t  this.addTrack = this.addTrack.bind(this);\n\t  this.removeTrack = this.removeTrack.bind(this);\n  }\n\t\n  // Step 45\n  addTrack() {\n\t  this.props.onAdd(this.props.track)\n  };\n\t\n  // Step 53\n  removeTrack() {\n\t  this.props.onRemove(this.props.track)  \n  };\n\n  //   Step 47, addTrack\n  //   Step 55, removeTrack\n  //   Extract <a> elements in render\n  //      with conditional if/else.\n  //      Moved and divided <a> elements.\n  addRemoveTracks() {\n\t  if (this.props.isRemoval) {\n          return <a className=\"Track-action\" \n\t\t  \t        onClick={this.removeTrack}>\n\t\t\t\t\t\t&#8208;\n\t\t\t\t </a>;\n        } return <a className=\"Track-action\" \n\t  \t\t\t    onClick={this.addTrack}>\n\t\t\t\t\t   &#43;\n\t\t         </a>;\n  }\n\t\n  render() {\n    return (\n\t\t<div className=\"Track\">\n\t\t  <div className=\"Track-information\">\n\t\t  {/* Step 35 */}\n\t\t\t<h3>{this.props.track.name}</h3>\n\t\t\t<p>{this.props.track.artist} | \n\t\t\t   {this.props.track.album}</p>\n\t\t  </div>\n\t\t  {/* + or - will go here */}\n\t\t\t   {this.renderAction()}\n\t\t</div>\n    );\n  }\n}\n\nexport default Track;","/* Refer to Native-HTML folder */\n/* Step 34. Somehow didn't work:\n\t{this.props.tracks.map(track => {\n\t\t\treturn <Track key={track.id}/>\n\t\t})\n\t}\n*/\n\nimport React, { Component } from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends Component {\n  render() {\n    return (\n\t\t<div className=\"TrackList\">\n\t\t{/* Step 34, map() */}\n\t\t{/* Step 43, isRemoval */}\n\t\t{/* Step 44, onAdd */}\n\t\t{/* Step 52, onRemove, isRemoval */}\n\t\t   { this.props.tracks.map(track => {\n\t\t\t\treturn <Track key={track.id}\n\t\t\t\t\ttrack={track}\n\t\t\t\t\tonAdd={this.props.onAdd}\n\t\t\t\t\tonRemove={this.props.onRemove}\n\t\t\t\t\tisRemoval={this.props.isRemoval}/>\n\t\t\t\t})}\n\t\t</div>\n\t);\n  }\n}\n\nexport default TrackList;","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends Component {\n  render() {\t  \n    return (\n\t\t<div className=\"SearchResults\">\n\t\t  <h2>Results</h2>\n\t\t    {/* Step 33 */}\n\t\t\t{/* Step 43 */}\n\t\t\t<TrackList \n\t\t\t\ttracks={this.props.searchResults}\n\t\t\t\tonAdd={this.props.onAdd} />\n\t\t</div>\n    );\n  }\n}\n\nexport default SearchResults;","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends Component {\n  // Step 60\n  constructor(props) {\n  super(props)\n\t  this.handleNameChange = this.handleNameChange.bind(this)\n  };\n\t\n  // Step 59- very difficult\n  // Changed \"defaultValue\" to\n  //   \"value\" in <input> below.\n  handleNameChange(event) {\n  \tthis.props.onNameChange(event.target.value)\n  };\n\t\n  render() {\n    return (\n\t\t<div className=\"Playlist\">\n\t\t  {/* Step 61, onChange */}\n\t\t  <input \n\t\t\t\tvalue={this.props.playlistName}\n\t\t\t\tonChange={this.handleNameChange} />\n\t\t  {/* Step 39, playlistTracks */}\n\t\t  {/* Step 51, onRemove */}\n\t\t  <TrackList \n\t\t\t\ttracks={this.props.playlistTracks}\n\t\t\t\tonRemove={this.props.onRemove} \n\t\t\t\tisRemoval={true} />\n\t\t  \t<a className=\"Playlist-save\" \n\t\t\t   onClick={this.props.onSave}>\n\t\t\t\t\tSAVE TO SPOTIFY\n\t\t\t</a>\n\t\t</div>\n    );\n  }\n}\n\nexport default Playlist;","/* Refer to Native HTML folder */\n\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './AppStyles.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n// Step 88\nimport Spotify from '../../util/Spotify.js';\n\n// Replaced hard-coded values for\n// searchResults and playlistTracks\nclass App extends Component {\n  constructor(props){\n  super(props);\n\t  \tthis.state = {\n\t\t\tsearchResults : [],\n\t\t\t// Step 37\n\t\t\tplaylistName : 'New Playlist',\n            playlistTracks : [],\n\t\t};\n\t  \n\t\t  // Each .bind in the following \n\t\t  //   steps must be included inside \n\t\t  //   of the App constructor.\n\n\t\t  // Step 42\n\t\t  this.addTrack = this.addTrack.bind(this);\n\n\t\t  // Step 50\n\t\t  this.removeTrack = this.removeTrack.bind(this);\n\n\t\t  // Step 58\n\t\t  this.updatePlaylistName = this.updatePlaylistName.bind(this);\n\t  \n\t  \t  // Step 64\n\t\t  this.savePlaylist = this.savePlaylist.bind(this);\n\t  \n\t  \t  // Step 68\n\t\t  this.search = this.search.bind(this);\n  \t  };\n\t\n\t\n\t  // Step 41\n\t  // Replaced \"return\" with .push and .setState\n\t  addTrack(track) {\n\t\t if (this.state.playlistTracks.findIndex(savedTrack => savedTrack.id === track.id) === -1) {\n\t\t  \tlet tracks = this.state.playlistTracks\n      \t\ttracks.push(track)\n      \t\tthis.setState({playlistTracks: tracks})\n\t\t \t}\n\t  };\n\t\n\t  // Step 49\n\t  removeTrack(track) {\n\t  \tconst trackIndex = this.state.playlistTracks.findIndex(_track => \n\t\t    _track.id === track.id);\n        if(trackIndex > -1) {\n            let tracks = this.state.playlistTracks\n            tracks.splice(trackIndex, 1)\n            this.setState({playlistTracks: tracks})\n        }\n\t  };\n\t\n\t  // Step 57\n\t  updatePlaylistName(name) {\n\t  \tthis.setState({playlistName : name})\n\t  };\n\t\n\t  // Step 63- difficult\n\t  // Step 95- difficult\n\t  savePlaylist() {\n\t\tconst trackURIs = this.state.playlistTracks;\n\t\tSpotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n\t\t  this.setState(\n\t\t\t{\n\t\t\t  playlistName: 'New Playlist',\n\t\t\t  playlistTracks: [],\n\t\t\t})\n\t\t})\n\t  };\n\t\n\t  // Step 67, console.log\n\t  // Step 88, Spotify.search\n\t  search(searchTerm) {\n\t  \t// console.log(searchTerm)\n\t\tSpotify.search(searchTerm).then(tracks => {\n            this.setState({\n                searchResults : tracks\n            })\n        });\n\t  };\n\t\n\t  render() {\n\t\treturn (\n\t\t  <div>\n\t\t  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n\t\t  <div className=\"App\">\n\t\t\t<SearchBar onSearch={this.search} />\n\t\t\t<div className=\"App-playlist\">\n\t\t\t\t{/* Step 42, addTrack */}\n\t\t\t\t<SearchResults \n\t\t\t\t\tsearchResults=\t\t\n\t\t\t\t\t\t{this.state.searchResults}\n\t\t\t\t\tonAdd={this.addTrack}\n\t\t\t\t\t/>\n\t\t\t    {/* Step 38, playlistName */}\n\t\t\t    {/* Step 50, onRemove */}\n\t\t\t\t{/* Step 64, onSave */}\n\t\t\t\t<Playlist \n\t\t\t\t\tplaylistName=\n\t\t\t\t\t\t{this.state.playlistName}\n\t\t\t\t\tplaylistTracks=\n\t\t\t\t\t\t{this.state.playlistTracks}\n\t\t\t\t\tonRemove= \n\t\t\t\t\t\t{this.removeTrack} \n\t\t\t\t\tonNameChange=\n\t\t\t\t\t\t{this.updatePlaylistName} \n\t\t\t\t\tonSave=\n\t\t\t\t\t\t{this.savePlaylist} />\n\t\t\t</div>\n\t\t  </div>\n\t\t</div>\n\t\t);\n\t  }\n\t}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}