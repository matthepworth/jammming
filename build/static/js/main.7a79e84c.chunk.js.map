{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["userAccessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","handleTermChange","onSearch","state","searchTerm","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","name","artist","album","onClick","TrackList","tracks","map","Components_Track_Track","key","id","isRemoval","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","spotifyAuthorizeURI","concat","userSearchTerm","searchRequest","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","findIndex","savedTrack","trackIndex","_track","splice","_this2","trackURIs","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a79e84c.chunk.js","sourcesContent":["const spotifyAuthorizeURIBase = 'https://accounts.spotify.com/authorize'\nconst spotifyAPIURIBase = 'https://api.spotify.com/v1/'\n// Step 82\nconst clientId = 'e6fcab95d31c472aaa8b16a90ef7721f'\n// Step 81\n// const redirectURI = 'http://localhost:3000/'\n// Step 97\nconst redirectURI = 'https://jammmingapp.surge.sh'\n\n// Step 77\nlet userAccessToken\n\n// Step 76\nconst Spotify = {\n\n    getAccessToken() {\n        if(userAccessToken) {\n            return userAccessToken\n        }\n\t\t\n\t\t// Step 79\n        const accessTokenMatch = \t\t\n\t\t\t  window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = \n\t\t\t  window.location.href.match(/expires_in=([^&]*)/);\n\n\t\t// Step 80\n        if (accessTokenMatch && expiresInMatch) {\n            userAccessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            \twindow.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n            \twindow.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        } else {\n\t\t\t// Step 83\n            const spotifyAuthorizeURI = `${spotifyAuthorizeURIBase}?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n            window.location = spotifyAuthorizeURI;\n        }\n\n    },\n\n\t// Step 85\n    search(userSearchTerm) {\n        const userAccessToken = Spotify.getAccessToken();\n\t\t// Step 86\n        const searchRequest = `${spotifyAPIURIBase}search?type=track&q=${userSearchTerm}`\n\t\t\n        return fetch(searchRequest, {\n            headers: {\n                Authorization: `Bearer ${userAccessToken}`\n            }\n        }).then(response => {\n\t\t\t// Step 87- extremely difficult\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id : track.id,\n                name : track.name,\n                artist : track.artists[0].name,\n                album : track.album.name,\n                uri : track.uri,\n            }));\n        });\n    },\n\n\t// Step 90\n    savePlaylist(playlistName, trackUris) {\n        if (!playlistName || !trackUris.length) {\n            return;\n        }\n\n\t\t// Step 91\n        const userAccessToken = Spotify.getAccessToken();\n        const headers = { \n\t\t\t\tAuthorization : `Bearer ${userAccessToken}` \n\t\t\t}\n        let userId\n\t\t// Step 92, fetch #1\n\t\t// Step 94, fetch #2\n        return fetch(`${spotifyAPIURIBase}me`, {headers : headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`${spotifyAPIURIBase}users/${userId}/playlists`, {\n                headers : headers,\n                method : 'POST',\n                body : JSON.stringify({name : playlistName})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`${spotifyAPIURIBase}users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers : headers,\n                    method : 'POST',\n                    body : JSON.stringify({uris: trackUris})\n                });\n            });\n        });\n    }\n}\n\n// Step 76\nexport default Spotify","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends Component {\n  // Step 70\n  constructor(props){\n  super(props)\n\t  this.search = this.search.bind(this)\n\t  this.handleTermChange = this.handleTermChange.bind(this)\n  };\n\t\n  search() {\n\tthis.props.onSearch(this.state.searchTerm);\n  };\n\n  // Step 71- difficult\n  handleTermChange(event) {\n  \tthis.setState({searchTerm: event.target.value })\n  };\n\t\n  render() {\n    return (\n\t\t<div className=\"SearchBar\">\n\t\t  {/* Step 73, onChange */}\n\t\t  <input \n\t\t\t\tplaceholder=\"Enter A Song, Album, or Artist\" \n\t\t\t\tonChange={this.handleTermChange} />\n\t\t  <a>SEARCH</a>\n\t\t</div>\n    );\n  }\n}\n\nexport default SearchBar;","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './Track.css';\n\nclass Track extends Component {\n// Step 46, addTrack.bind()\n// Step 54, removeTrack.bind()\n  constructor(props){\n  super(props)\n\t  this.addTrack = this.addTrack.bind(this);\n\t  this.removeTrack = this.removeTrack.bind(this);\n  }\n\t\n  // Step 45\n  addTrack() {\n\t  this.props.onAdd(this.props.track)\n  };\n\t\n  // Step 53\n  removeTrack() {\n\t  this.props.onRemove(this.props.track)  \n  };\n\t\n  render() {\n    return (\n\t\t<div className=\"Track\">\n\t\t  <div className=\"Track-information\">\n\t\t  {/* Step 35 */}\n\t\t\t<h3>{this.props.track.name}</h3>\n\t\t\t<p>{this.props.track.artist} | \n\t\t\t   {this.props.track.album}</p>\n\t\t  </div>\n\t\t  {/* Step 47, addTrack */}\n\t\t  {/* Step 55, removeTrack */}\n\t\t  {/* + or - will go here */}\n\t\t\t  <a className=\"Track-action\" \n\t\t  \t\t onClick={this.addTrack}>\n\t\t\t\t\t&#43;\n\t\t\t  </a>\n\t\t\t  <a className=\"Track-action\" \n\t\t  \t\t onClick={this.removeTrack}>\n\t\t\t\t\t&#8208;\n\t\t\t  </a>\n\t\t</div>\n    );\n  }\n}\n\nexport default Track;","/* Refer to Native-HTML folder */\n/* Step 34. Somehow didn't work:\n\t{this.props.tracks.map(track => {\n\t\t\treturn <Track key={track.id}/>\n\t\t})\n\t}\n*/\n\nimport React, { Component } from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends Component {\n  render() {\n    return (\n\t\t<div className=\"TrackList\">\n\t\t{/* Step 34, map() */}\n\t\t{/* Step 43, isRemoval */}\n\t\t{/* Step 44, onAdd */}\n\t\t{/* Step 52, onRemove, isRemoval */}\n\t\t   {this.props.tracks.map(track => {\n\t\t\t\treturn <Track key={track.id}\n\t\t\t\t\ttrack={track}\n\t\t\t\t\tonAdd={this.props.onAdd}\n\t\t\t\t\tonRemove={this.props.onRemove}\n\t\t\t\t\tisRemoval={this.props.isRemoval}/>\n\t\t\t\t})}\n\t\t</div>\n\t);\n  }\n}\n\nexport default TrackList;","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends Component {\n  render() {\t  \n    return (\n\t\t<div className=\"SearchResults\">\n\t\t  <h2>Results</h2>\n\t\t    {/* Step 33 */}\n\t\t\t{/* Step 43 */}\n\t\t\t<TrackList \n\t\t\t\ttracks={this.props.searchResults}\n\t\t\t\tonAdd={this.props.onAdd} />\n\t\t</div>\n    );\n  }\n}\n\nexport default SearchResults;","/* Refer to Native-HTML folder */\n\nimport React, { Component } from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends Component {\n  // Step 60\n  constructor(props) {\n  super(props)\n\t  this.handleNameChange = this.handleNameChange.bind(this)\n  };\n\t\n  // Step 59- very difficult\n  // Changed \"defaultValue\" to\n  //   \"value\" in <input> below.\n  handleNameChange(event) {\n  \tthis.props.onNameChange(event.target.value)\n  };\n\t\n  render() {\n    return (\n\t\t<div className=\"Playlist\">\n\t\t  {/* Step 61, onChange */}\n\t\t  <input \n\t\t\t\tvalue={'New Playlist'}\n\t\t\t\tonChange={this.handleNameChange} />\n\t\t  {/* Step 39, playlistTracks */}\n\t\t  {/* Step 51, onRemove */}\n\t\t  <TrackList \n\t\t\t\ttracks={this.props.playlistTracks}\n\t\t\t\tonRemove={this.props.onRemove} />\n\t\t  \t<a className=\"Playlist-save\" \n\t\t\t   onClick={this.props.onSave}>\n\t\t\t\t\tSAVE TO SPOTIFY\n\t\t\t</a>\n\t\t</div>\n    );\n  }\n}\n\nexport default Playlist;","/* Refer to Native HTML folder */\n\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './AppStyles.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n// Step 88\nimport Spotify from '../../util/Spotify.js';\n\n\nclass App extends Component {\n  constructor(props){\n  super(props);\n\t  \tthis.state = {\n\t\t\tsearchResults : [\n\t\t\t\t{\n\t\t\t\t  name :'Addicted to Love',\n\t\t\t\t  artist :'Robert Palmer',\n\t\t\t\t  album :'Riptide',\n\t\t\t\t  id :'0000001',\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000002',\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000003',\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000004',\n\t\t\t\t},\n\t\t\t],\n\t\t\t\n\t\t\t// Step 37\n\t\t\tplaylistName : 'New Playlist',\n            playlistTracks : [\n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000005',\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000006',\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000007',\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t  name :'',\n\t\t\t\t  artist :'',\n\t\t\t\t  album :'',\n\t\t\t\t  id :'0000008',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t  \n\t\t  // Each .bind in the following \n\t\t  //   steps must be included inside \n\t\t  //   of the App constructor.\n\n\t\t  // Step 42\n\t\t  this.addTrack = this.addTrack.bind(this);\n\n\t\t  // Step 50\n\t\t  this.removeTrack = this.removeTrack.bind(this);\n\n\t\t  // Step 58\n\t\t  this.updatePlaylistName = this.updatePlaylistName.bind(this);\n\t  \n\t  \t  // Step 64\n\t\t  this.savePlaylist = this.savePlaylist.bind(this);\n\t  \n\t  \t  // Step 68\n\t\t  this.search = this.search.bind(this);\n  \t  };\n\t\n\t\n\t  // Step 41\n\t  addTrack(track) {\n\t\t if (this.state.playlistTracks.findIndex(savedTrack => \t\n\t\t\t savedTrack.id === track.id)) {\n\t\t  \t\treturn;\n\t\t \t }\n\t  };\n\t\n\t  // Step 49\n\t  removeTrack(track) {\n\t  \tconst trackIndex = this.state.playlistTracks.findIndex(_track => \n\t\t    _track.id === track.id);\n        if(trackIndex > -1) {\n            let tracks = this.state.playlistTracks\n            tracks.splice(trackIndex, 1)\n            this.setState({playlistTracks: tracks})\n        }\n\t  };\n\t\n\t  // Step 57\n\t  updatePlaylistName(name) {\n\t  \tthis.setState({playlistName : name})\n\t  };\n\t\n\t  // Step 63- difficult\n\t  savePlaylist() {\n\t\tconst trackURIs = this.state.playlistTracks;\n\t\tSpotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n\t\t  this.setState(\n\t\t\t{\n\t\t\t  playlistName: 'New Playlist',\n\t\t\t  playlistTracks: [],\n\t\t\t})\n\t\t})\n\t  };\n\t\n\t  // Step 67, console.log\n\t  // Step 88, Spotify.search\n\t  search(searchTerm) {\n\t  \t// console.log(searchTerm)\n\t\tSpotify.search(searchTerm).then(tracks => {\n            this.setState({\n                searchResults : tracks\n            })\n        });\n\t  };\n\t\n\t  render() {\n\t\treturn (\n\t\t  <div>\n\t\t  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n\t\t  <div className=\"App\">\n\t\t\t<SearchBar onSearch={this.search} />\n\t\t\t<div className=\"App-playlist\">\n\t\t\t\t{/* Step 42, addTrack */}\n\t\t\t\t<SearchResults \n\t\t\t\t\tsearchResults=\t\t\n\t\t\t\t\t\t{this.state.searchResults}\n\t\t\t\t\tonAdd={this.addTrack}\n\t\t\t\t\t/>\n\t\t\t    {/* Step 38, playlistName */}\n\t\t\t    {/* Step 50, onRemove */}\n\t\t\t\t{/* Step 64, onSave */}\n\t\t\t\t<Playlist \n\t\t\t\t\tplaylistName=\n\t\t\t\t\t\t{this.state.playlistName}\n\t\t\t\t\tplaylistTracks=\n\t\t\t\t\t\t{this.state.playlistTracks}\n\t\t\t\t\tonRemove= \n\t\t\t\t\t\t{this.removeTrack} \n\t\t\t\t\tonNameChange=\n\t\t\t\t\t\t{this.updatePlaylistName} \n\t\t\t\t\tonSave=\n\t\t\t\t\t\t{this.savePlaylist} />\n\t\t\t</div>\n\t\t  </div>\n\t\t</div>\n\t\t);\n\t  }\n\t}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}